#!/usr/sbin/nft -f

flush ruleset

table inet filter {

    chain input {
        type filter hook input priority 0; policy drop;
        iif lo accept
        iifname wan jump input_wan
        iifname wg0 accept
    }
    chain input_wan {
        ip protocol icmp accept
        ip protocol udp udp sport 67 udp dport 68 accept
        ip6 nexthdr icmpv6 accept
        ip6 nexthdr udp udp sport 547 udp dport 546 accept
        meta pkttype { broadcast, multicast } drop
        ct state invalid drop
        ct state established,related ip protocol tcp queue num 0-3 fanout,bypass
        ct state established,related ip6 nexthdr tcp queue num 4-7 fanout,bypass
        ct state established,related accept
{% if wan_ssh %}
        tcp sport 1024-65535 tcp dport 22 accept
{% endif %}
        udp sport 1024-65535 udp dport { 123, {{ wg0_port }}, 1024-65535 } accept
    }

    chain output {
        type filter hook output priority 0; policy drop;
        oif lo accept
        oifname wan jump output_wan
        oifname wg0 accept
    }
    chain output_wan {
        ip protocol icmp accept
        ip protocol udp udp sport 68 udp dport 67 accept
        ip6 nexthdr icmpv6 accept
        ip6 nexthdr udp udp sport 546 udp dport 547 accept
        meta pkttype { broadcast, multicast } drop
        ct state invalid drop
        ct state established,related ip protocol tcp queue num 0-3 fanout,bypass
        ct state established,related ip6 nexthdr tcp queue num 4-7 fanout,bypass
        ct state established,related accept
        ip daddr 192.168.1.254 udp sport 1024-65535 udp dport 53 skuid systemd-resolve accept
        udp sport 1024-65535 udp dport 123 skuid systemd-timesync accept
        ip protocol tcp tcp sport 1024-65535 tcp dport { 443, 993 } skuid { _apt, proxy, debian-tor } queue num 0-3 fanout,bypass
        ip6 nexthdr tcp tcp sport 1024-65535 tcp dport { 443, 993 } skuid { _apt, proxy, debian-tor } queue num 4-7 fanout,bypass
        udp sport 1024-65535 udp sport 1024-65535 skuid { proxy, debian-tor } accept
        reject with icmpx type port-unreachable
    }

    chain forward {
        type filter hook forward priority 0; policy drop;
        meta pkttype { broadcast, multicast } drop
        iifname wg0 oifname wan jump forward_nat
        iifname wan oifname wg0 jump forward_reverse
        iifname wg0 oifname wg0 reject with icmpx type host-unreachable
    }
    chain forward_reverse {
        ct state invalid drop
        ct state established,related ip protocol tcp queue num 0-3 fanout,bypass
        ct state established,related ip6 nexthdr tcp queue num 4-7 fanout,bypass
        ct state established,related accept
        drop
    }
    chain forward_nat {
        ct state invalid drop
        ct state established,related ip protocol tcp queue num 0-3 fanout,bypass
        ct state established,related ip6 nexthdr tcp queue num 4-7 fanout,bypass
        ct state established,related accept
        ip daddr { 142.250.0.0/15, 172.217.0.0/16, 173.194.0.0/16, 74.125.0.0/16, 17.0.0.0/8 } tcp sport 49152-65535 tcp dport 587 meta mark set 0x000000b4 queue num 0-3 fanout,bypass
        ip daddr 157.240.0.0/17 tcp sport 49152-65535 tcp dport 5222 meta mark set 0x000000b4 queue num 0-3 fanout,bypass
        ip6 daddr { 2607:f8b0::/32, 2403:300::/32, 2620:149::/32, 2a01:b740::/32, 2a01:b747::/32 } tcp sport 49152-65535 tcp dport 587 meta mark set 0x000000b4 queue num 4-7 fanout,bypass
        ip6 daddr 2a03:2880::/32 tcp sport 49152-65535 tcp dport 5222 meta mark set 0x000000b4 queue num 4-7 fanout,bypass
        udp sport { 16384-16403, 49152-65535 } udp dport 1024-65535 meta mark set 0x000000b4 accept
        reject with icmpx type port-unreachable
    }

    chain prerouting {
        type nat hook prerouting priority 0;
        iifname wg0 ip daddr != {{ wg0_ipv4 }} tcp dport 53 redirect to 53
        iifname wg0 ip daddr != {{ wg0_ipv4 }} udp dport 53 redirect to 53
        iifname wg0 ip daddr != {{ wg0_ipv4 }} tcp dport 80 redirect to 80
        iifname wg0 ip daddr != {{ wg0_ipv4 }} udp dport 123 redirect to 123
        iifname wg0 ip daddr != {{ wg0_ipv4 }} tcp dport { 443, 993 } redirect to 443
        iifname wg0 ip6 daddr != {{ wg0_ipv6 }} tcp dport 53 redirect to 53
        iifname wg0 ip6 daddr != {{ wg0_ipv6 }} udp dport 53 redirect to 53
        iifname wg0 ip6 daddr != {{ wg0_ipv6 }} tcp dport 80 redirect to 80
        iifname wg0 ip6 daddr != {{ wg0_ipv6 }} udp dport 123 redirect to 123
        iifname wg0 ip6 daddr != {{ wg0_ipv6 }} tcp dport { 443, 993 } redirect to 443
        iifname wg0 ip daddr { 140.82.112.0/20, 143.55.64.0/20, 192.30.252.0/22, 116.202.120.180/32 } tcp sport 49152-65535 tcp dport 22 redirect to 9040
        iifname wg0 ip daddr { 17.249.0.0/16, 17.252.0.0/16, 17.57.144.0/22, 17.188.128.0/18, 17.188.20.0/23 } tcp sport 49152-65535 tcp dport 5223 redirect to 9040
        iifname wg0 ip6 daddr { 2620:112:3000::/44, 2a0a:a440::/29, 2a01:4f8:fff0:4f:266:37ff:feb8:3489/128 } tcp sport 49152-65535 tcp dport 22 redirect to 9040
        iifname wg0 ip6 daddr { 2620:149:a44::/48, 2403:300:a42::/48, 2403:300:a51::/48, 2a01:b740:a42::/48 } tcp sport 49152-65535 tcp dport 5223 redirect to 9040
    }

    chain postrouting {
        type nat hook postrouting priority 0;
        oifname wan tcp flags syn tcp option maxseg size set rt mtu
        oifname wan meta mark 0x000000b4 masquerade fully-random
    }
}