---

- name: Install postgresql
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - postgresql
    - postgresql-contrib
    - python3-psycopg2
  tags: postgresql

- name: Cleanup postgresql.conf
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ master_postgresql_version }}/main/postgresql.conf"
    regexp: "{{ item }}"
    state: absent
  loop:
    - '^#'
    - '^\s*$'
    - '^\s*#'
  notify: Restart postgresql
  tags: postgresql

- name: Tune the postgresql.conf parameters
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ master_postgresql_version }}/main/postgresql.conf"
    regexp: '^{{ item.key }}\s'
    line: "{{ item.key }} = {{ item.value }}"
    state: present
  loop:
    - key: shared_buffers
      value: 8GB
    - key: effective_cache_size
      value: 24GB
    - key: maintenance_work_mem
      value: 2GB
    - key: wal_buffers
      value: 16MB
    - key: default_statistics_target
      value: 100
    - key: random_page_cost
      value: 1.1
    - key: effective_io_concurrency
      value: 200
    - key: work_mem
      value: 104857kB
    - key: huge_pages
      value: try
    - key: min_wal_size
      value: 1GB
    - key: max_wal_size
      value: 4GB
    - key: max_worker_processes
      value: 4
    - key: max_parallel_workers_per_gather
      value: 2
    - key: max_parallel_workers
      value: 4
    - key: max_parallel_maintenance_workers
      value: 2
  notify: Restart postgresql
  tags: postgresql

- name: Enable and start postgresql
  ansible.builtin.systemd:
    name: "postgresql@{{ master_postgresql_version }}-main.service"
    enabled: true
    state: started
  tags: postgresql

- name: Ensure PostgreSQL users are present
  community.postgresql.postgresql_user:
    name: "{{ item.username }}"
    password: "{{ item.password | default(omit) }}"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  loop:
    - { username: "magnetico", password: "magnetico" }
    - { username: "grafana", password: "grafana" }
    - { username: "nfguard", password: "nfguard" }
    - { username: "reader", password: "reader" }
    - { username: "{{ master_prometheus_postgres_exporter }}", password: "{{ master_prometheus_postgres_exporter }}" }
  tags: postgresql

- name: Ensure specified PostgreSQL databases are present
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner }}"
    lc_collate: "C.UTF-8"
    lc_ctype: "C.UTF-8"
    encoding: "UTF-8"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  loop:
    - { name: "magnetico", owner: "magnetico" }
    - { name: "grafana", owner: "grafana" }
    - { name: "nfguard", owner: "nfguard" }
  tags: postgresql

- name: Ensure grafana can use the specified schemas
  community.postgresql.postgresql_privs:
    db: "{{ item.db }}"
    privs: "USAGE"
    type: "schema"
    objs: "{{ item.schema }}"
    roles: "reader"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  loop:
    - { db: "magnetico", schema: "public" }
    - { db: "nfguard", schema: "public" }
  tags: postgresql

- name: Ensure grafana can read from the tables
  community.postgresql.postgresql_privs:
    db: "{{ item }}"
    privs: "SELECT"
    type: "table"
    objs: "ALL_IN_SCHEMA"
    roles: "reader"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  loop:
    - "magnetico"
    - "nfguard"
  tags: postgresql

- name: Ensure specified PostgreSQL extensions are loaded
  community.postgresql.postgresql_ext:
    name: "{{ item.name }}"
    db: "{{ item.db }}"
    cascade: true
    version: latest
    schema: public
    login_unix_socket: "{{ master_postgresql_socketdir }}"
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  loop:
    - { name: "pg_trgm", db: "magnetico" }
  tags: postgresql

- name: Ensure table a exists
  community.postgresql.postgresql_query:
    db: "nfguard"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
    query: |
      CREATE TABLE IF NOT EXISTS a (
        key VARCHAR(255) PRIMARY KEY,
        value TEXT,
        discovered_on TIMESTAMP,
        last_used TIMESTAMP
      );
      CREATE INDEX IF NOT EXISTS idx_a_discovered_on ON a(discovered_on);
      CREATE INDEX IF NOT EXISTS idx_a_last_used ON a(last_used);
      ALTER TABLE a OWNER TO nfguard;
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  tags: postgresql

- name: Ensure table aaaa exists
  community.postgresql.postgresql_query:
    db: "nfguard"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
    query: |
      CREATE TABLE IF NOT EXISTS aaaa (
        key VARCHAR(255) PRIMARY KEY,
        value TEXT,
        discovered_on TIMESTAMP,
        last_used TIMESTAMP
      );
      CREATE INDEX IF NOT EXISTS idx_aaaa_discovered_on ON aaaa(discovered_on);
      CREATE INDEX IF NOT EXISTS idx_aaaa_last_used ON aaaa(last_used);
      ALTER TABLE aaaa OWNER TO nfguard;
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  tags: postgresql

- name: Ensure table http exists
  community.postgresql.postgresql_query:
    db: "nfguard"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
    query: |
      CREATE TABLE IF NOT EXISTS http (
          epoch BIGINT NOT NULL,
          remote VARCHAR(45) NOT NULL,
          country CHAR(2),
          proto VARCHAR(10) NOT NULL,
          host VARCHAR(255) NOT NULL,
          method VARCHAR(10) NOT NULL,
          request TEXT NOT NULL,
          status INTEGER NOT NULL,
          bytes BIGINT NOT NULL,
          PRIMARY KEY (epoch, remote, country, proto, host, method, request, status, bytes)
      );
      ALTER TABLE http OWNER TO nfguard;
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  tags: postgresql

- name: Ensure the postgres exporter can read the statistics
  community.postgresql.postgresql_query:
    db: "postgres"
    login_unix_socket: "{{ master_postgresql_socketdir }}"
    query: |
      ALTER USER {{ master_prometheus_postgres_exporter }} SET SEARCH_PATH TO postgres_exporter,pg_catalog;
      GRANT CONNECT ON DATABASE postgres TO {{ master_prometheus_postgres_exporter }};
  become: true
  become_method: ansible.builtin.su
  become_user: "{{ master_postgresql_socketuser }}"
  tags: postgresql
