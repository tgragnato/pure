---

- name: Check if folder exist for grafana
  ansible.builtin.stat:
    path: "{{ master_grafana_folder }}"
  register: master_grafana_installed
  tags: grafana

- name: Extract the standalone archive
  ansible.builtin.unarchive:
    src: "grafana-{{ master_grafana_version }}.linux-amd64.tar.gz"
    dest: "{{ local_folder }}"
    remote_src: false
  when: not master_grafana_installed.stat.exists
  tags: grafana

- name: Setup grafana
  ansible.builtin.template:
    src: grafana.ini.j2
    dest: "{{ master_grafana_folder }}/conf/grafana.ini"
    owner: root
    group: root
    mode: '0644'
  notify: Restart grafana
  tags: grafana

- name: Set the grafana service facts
  ansible.builtin.set_fact:
    master_service_after: "postgresql.service"
    master_service_ambient_capabilities: ""
    master_service_capability_bounding_set: ""
    master_service_description: "Grafana instance"
    master_service_exec_start: "{{ master_grafana_folder }}/bin/grafana server --config={{ master_grafana_folder }}/conf/grafana.ini"
    master_service_group: "nogroup"
    master_service_limit_nofile: 32768
    master_service_memory_deny_write_execute: "false"
    master_service_protect_clock: "true"
    master_service_readwrite_paths: ""
    master_service_restrict_address_families: "AF_INET AF_INET6"
    master_service_umask: "0027"
    master_service_user: "nobody"
    master_service_working_directory: "{{ master_grafana_folder }}"
  tags: grafana

- name: Setup the grafana systemd service
  ansible.builtin.template:
    src: sandboxed.service.j2
    dest: "{{ systemd_system }}/grafana.service"
    owner: root
    group: root
    mode: '0644'
  notify: Restart grafana
  tags: grafana

- name: Enable and start grafana
  ansible.builtin.systemd:
    name: grafana.service
    state: started
    enabled: true
    masked: false
  tags: grafana
