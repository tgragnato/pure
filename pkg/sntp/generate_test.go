package sntp

import (
	"reflect"
	"testing"
	"time"
)

func TestInt2Bytes(t *testing.T) {
	t.Parallel()

	tests := []struct {
		input    int64
		expected []byte
	}{
		{0, []byte{0, 0, 0, 0}},
		{255, []byte{0, 0, 0, 255}},
		{65535, []byte{0, 0, 255, 255}},
		{16777215, []byte{0, 255, 255, 255}},
		{4294967295, []byte{255, 255, 255, 255}},
	}

	for _, test := range tests {
		result := int2bytes(test.input)
		if !reflect.DeepEqual(result, test.expected) {
			t.Errorf("For input %d, expected %v, but got %v", test.input, test.expected, result)
		}
	}
}

func TestGenerate(t *testing.T) {
	t.Parallel()

	now := time.Date(2024, time.August, 19, 19, 1, 2, 3, time.UTC)
	tests := []struct {
		request  []byte
		expected []byte
	}{
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xc1, 0xea, 0x37, 0x94, 0x84, 0x6b, 0x2d},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xc1, 0xea, 0x37, 0x94, 0x84, 0x6b, 0x2d, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x11, 0x25, 0x96, 0xb7, 0x92, 0x1a, 0x49},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0xee, 0x11, 0x25, 0x96, 0xb7, 0x92, 0x1a, 0x49, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x52, 0x16, 0x81, 0xa8, 0xfd, 0xe6, 0x12},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0x16, 0x52, 0x16, 0x81, 0xa8, 0xfd, 0xe6, 0x12, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x31, 0x26, 0xfd, 0x43, 0xda, 0x1f, 0xa2},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x31, 0x26, 0xfd, 0x43, 0xda, 0x1f, 0xa2, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x86, 0x20, 0x3f, 0xc3, 0x34, 0xbc, 0x6a},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x86, 0x20, 0x3f, 0xc3, 0x34, 0xbc, 0x6a, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x15, 0x7b, 0x0b, 0x08, 0xc1, 0xb2, 0x91},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0x22, 0x15, 0x7b, 0x0b, 0x08, 0xc1, 0xb2, 0x91, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
		{
			[]byte{0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x34, 0xa2, 0xfa, 0x70, 0xee, 0x80, 0xbb},
			[]byte{0x24, 0x01, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49, 0x43, 0x54, 0xea, 0x6e, 0x14, 0xee, 0x00, 0x00, 0x00, 0x00, 0x53, 0x34, 0xa2, 0xfa, 0x70, 0xee, 0x80, 0xbb, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83, 0xea, 0x6e, 0x14, 0xee, 0x83, 0xaa, 0x7e, 0x83},
		},
	}

	for _, test := range tests {
		result := generate(test.request, now)

		if !reflect.DeepEqual(result, test.expected) {
			t.Errorf("Expected %v, but got %v", test.expected, result)
		}
	}
}
